import{B as P,i as d,j as y,R as S}from"./index.b00245d2.js";const u=function(l){return{apiSysDatabaseAddColumnPost:async(a,e={})=>{const r="/api/sysDatabase/addColumn",s=new URL(r,"https://example.com");let t;l&&(t=l.baseOptions);const n={method:"POST",...t,...e},c={},h={};c["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(s.search);for(const o in h)i.set(o,h[o]);for(const o in e.params)i.set(o,e.params[o]);s.search=new URLSearchParams(i).toString();let p=t&&t.headers?t.headers:{};n.headers={...c,...p,...e.headers};const m=typeof a!="string"||n.headers["Content-Type"]==="application/json";return n.data=m?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDatabaseAddTablePost:async(a,e={})=>{const r="/api/sysDatabase/addTable",s=new URL(r,"https://example.com");let t;l&&(t=l.baseOptions);const n={method:"POST",...t,...e},c={},h={};c["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(s.search);for(const o in h)i.set(o,h[o]);for(const o in e.params)i.set(o,e.params[o]);s.search=new URLSearchParams(i).toString();let p=t&&t.headers?t.headers:{};n.headers={...c,...p,...e.headers};const m=typeof a!="string"||n.headers["Content-Type"]==="application/json";return n.data=m?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDatabaseColumnListTableNameConfigIdGet:async(a,e,r={})=>{if(a==null)throw new S("tableName","Required parameter tableName was null or undefined when calling apiSysDatabaseColumnListTableNameConfigIdGet.");if(e==null)throw new S("configId","Required parameter configId was null or undefined when calling apiSysDatabaseColumnListTableNameConfigIdGet.");const s="/api/sysDatabase/columnList/{tableName}/{configId}".replace("{tableName}",encodeURIComponent(String(a))).replace("{configId}",encodeURIComponent(String(e))),t=new URL(s,"https://example.com");let n;l&&(n=l.baseOptions);const c={method:"GET",...n,...r},h={},i={},p=new URLSearchParams(t.search);for(const o in i)p.set(o,i[o]);for(const o in r.params)p.set(o,r.params[o]);t.search=new URLSearchParams(p).toString();let m=n&&n.headers?n.headers:{};return c.headers={...h,...m,...r.headers},{url:t.pathname+t.search+t.hash,options:c}},apiSysDatabaseCreateEntityPost:async(a,e={})=>{const r="/api/sysDatabase/createEntity",s=new URL(r,"https://example.com");let t;l&&(t=l.baseOptions);const n={method:"POST",...t,...e},c={},h={};c["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(s.search);for(const o in h)i.set(o,h[o]);for(const o in e.params)i.set(o,e.params[o]);s.search=new URLSearchParams(i).toString();let p=t&&t.headers?t.headers:{};n.headers={...c,...p,...e.headers};const m=typeof a!="string"||n.headers["Content-Type"]==="application/json";return n.data=m?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDatabaseDeleteColumnPost:async(a,e={})=>{const r="/api/sysDatabase/deleteColumn",s=new URL(r,"https://example.com");let t;l&&(t=l.baseOptions);const n={method:"POST",...t,...e},c={},h={};c["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(s.search);for(const o in h)i.set(o,h[o]);for(const o in e.params)i.set(o,e.params[o]);s.search=new URLSearchParams(i).toString();let p=t&&t.headers?t.headers:{};n.headers={...c,...p,...e.headers};const m=typeof a!="string"||n.headers["Content-Type"]==="application/json";return n.data=m?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDatabaseDeleteTablePost:async(a,e={})=>{const r="/api/sysDatabase/deleteTable",s=new URL(r,"https://example.com");let t;l&&(t=l.baseOptions);const n={method:"POST",...t,...e},c={},h={};c["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(s.search);for(const o in h)i.set(o,h[o]);for(const o in e.params)i.set(o,e.params[o]);s.search=new URLSearchParams(i).toString();let p=t&&t.headers?t.headers:{};n.headers={...c,...p,...e.headers};const m=typeof a!="string"||n.headers["Content-Type"]==="application/json";return n.data=m?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDatabaseListGet:async(a={})=>{const e="/api/sysDatabase/list",r=new URL(e,"https://example.com");let s;l&&(s=l.baseOptions);const t={method:"GET",...s,...a},n={},c={},h=new URLSearchParams(r.search);for(const p in c)h.set(p,c[p]);for(const p in a.params)h.set(p,a.params[p]);r.search=new URLSearchParams(h).toString();let i=s&&s.headers?s.headers:{};return t.headers={...n,...i,...a.headers},{url:r.pathname+r.search+r.hash,options:t}},apiSysDatabaseTableListConfigIdGet:async(a,e={})=>{if(a==null)throw new S("configId","Required parameter configId was null or undefined when calling apiSysDatabaseTableListConfigIdGet.");const r="/api/sysDatabase/tableList/{configId}".replace("{configId}",encodeURIComponent(String(a))),s=new URL(r,"https://example.com");let t;l&&(t=l.baseOptions);const n={method:"GET",...t,...e},c={},h={},i=new URLSearchParams(s.search);for(const m in h)i.set(m,h[m]);for(const m in e.params)i.set(m,e.params[m]);s.search=new URLSearchParams(i).toString();let p=t&&t.headers?t.headers:{};return n.headers={...c,...p,...e.headers},{url:s.pathname+s.search+s.hash,options:n}},apiSysDatabaseUpdateColumnPost:async(a,e={})=>{const r="/api/sysDatabase/updateColumn",s=new URL(r,"https://example.com");let t;l&&(t=l.baseOptions);const n={method:"POST",...t,...e},c={},h={};c["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(s.search);for(const o in h)i.set(o,h[o]);for(const o in e.params)i.set(o,e.params[o]);s.search=new URLSearchParams(i).toString();let p=t&&t.headers?t.headers:{};n.headers={...c,...p,...e.headers};const m=typeof a!="string"||n.headers["Content-Type"]==="application/json";return n.data=m?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDatabaseUpdateTablePost:async(a,e={})=>{const r="/api/sysDatabase/updateTable",s=new URL(r,"https://example.com");let t;l&&(t=l.baseOptions);const n={method:"POST",...t,...e},c={},h={};c["Content-Type"]="application/json-patch+json";const i=new URLSearchParams(s.search);for(const o in h)i.set(o,h[o]);for(const o in e.params)i.set(o,e.params[o]);s.search=new URLSearchParams(i).toString();let p=t&&t.headers?t.headers:{};n.headers={...c,...p,...e.headers};const m=typeof a!="string"||n.headers["Content-Type"]==="application/json";return n.data=m?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:n}}}},b=function(l){return{async apiSysDatabaseAddColumnPost(a,e){const r=await u(l).apiSysDatabaseAddColumnPost(a,e);return(s=d,t=y)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDatabaseAddTablePost(a,e){const r=await u(l).apiSysDatabaseAddTablePost(a,e);return(s=d,t=y)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDatabaseColumnListTableNameConfigIdGet(a,e,r){const s=await u(l).apiSysDatabaseColumnListTableNameConfigIdGet(a,e,r);return(t=d,n=y)=>{const c={...s.options,url:n+s.url};return t.request(c)}},async apiSysDatabaseCreateEntityPost(a,e){const r=await u(l).apiSysDatabaseCreateEntityPost(a,e);return(s=d,t=y)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDatabaseDeleteColumnPost(a,e){const r=await u(l).apiSysDatabaseDeleteColumnPost(a,e);return(s=d,t=y)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDatabaseDeleteTablePost(a,e){const r=await u(l).apiSysDatabaseDeleteTablePost(a,e);return(s=d,t=y)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDatabaseListGet(a){const e=await u(l).apiSysDatabaseListGet(a);return(r=d,s=y)=>{const t={...e.options,url:s+e.url};return r.request(t)}},async apiSysDatabaseTableListConfigIdGet(a,e){const r=await u(l).apiSysDatabaseTableListConfigIdGet(a,e);return(s=d,t=y)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDatabaseUpdateColumnPost(a,e){const r=await u(l).apiSysDatabaseUpdateColumnPost(a,e);return(s=d,t=y)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDatabaseUpdateTablePost(a,e){const r=await u(l).apiSysDatabaseUpdateTablePost(a,e);return(s=d,t=y)=>{const n={...r.options,url:t+r.url};return s.request(n)}}}};class O extends P{async apiSysDatabaseAddColumnPost(a,e){return b(this.configuration).apiSysDatabaseAddColumnPost(a,e).then(r=>r(this.axios,this.basePath))}async apiSysDatabaseAddTablePost(a,e){return b(this.configuration).apiSysDatabaseAddTablePost(a,e).then(r=>r(this.axios,this.basePath))}async apiSysDatabaseColumnListTableNameConfigIdGet(a,e,r){return b(this.configuration).apiSysDatabaseColumnListTableNameConfigIdGet(a,e,r).then(s=>s(this.axios,this.basePath))}async apiSysDatabaseCreateEntityPost(a,e){return b(this.configuration).apiSysDatabaseCreateEntityPost(a,e).then(r=>r(this.axios,this.basePath))}async apiSysDatabaseDeleteColumnPost(a,e){return b(this.configuration).apiSysDatabaseDeleteColumnPost(a,e).then(r=>r(this.axios,this.basePath))}async apiSysDatabaseDeleteTablePost(a,e){return b(this.configuration).apiSysDatabaseDeleteTablePost(a,e).then(r=>r(this.axios,this.basePath))}async apiSysDatabaseListGet(a){return b(this.configuration).apiSysDatabaseListGet(a).then(e=>e(this.axios,this.basePath))}async apiSysDatabaseTableListConfigIdGet(a,e){return b(this.configuration).apiSysDatabaseTableListConfigIdGet(a,e).then(r=>r(this.axios,this.basePath))}async apiSysDatabaseUpdateColumnPost(a,e){return b(this.configuration).apiSysDatabaseUpdateColumnPost(a,e).then(r=>r(this.axios,this.basePath))}async apiSysDatabaseUpdateTablePost(a,e){return b(this.configuration).apiSysDatabaseUpdateTablePost(a,e).then(r=>r(this.axios,this.basePath))}}export{O as S};
