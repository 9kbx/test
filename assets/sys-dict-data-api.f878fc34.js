import{B as P,i as y,j as d,R as m}from"./index.09fc6580.js";const u=function(c){return{apiSysDictDataAddPost:async(a,t={})=>{const r="/api/sysDictData/add",s=new URL(r,"https://example.com");let e;c&&(e=c.baseOptions);const i={method:"POST",...e,...t},l={},h={};l["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const n in h)o.set(n,h[n]);for(const n in t.params)o.set(n,t.params[n]);s.search=new URLSearchParams(o).toString();let D=e&&e.headers?e.headers:{};i.headers={...l,...D,...t.headers};const p=typeof a!="string"||i.headers["Content-Type"]==="application/json";return i.data=p?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:i}},apiSysDictDataDataListCodeGet:async(a,t={})=>{if(a==null)throw new m("code","Required parameter code was null or undefined when calling apiSysDictDataDataListCodeGet.");const r="/api/sysDictData/dataList/{code}".replace("{code}",encodeURIComponent(String(a))),s=new URL(r,"https://example.com");let e;c&&(e=c.baseOptions);const i={method:"GET",...e,...t},l={},h={},o=new URLSearchParams(s.search);for(const p in h)o.set(p,h[p]);for(const p in t.params)o.set(p,t.params[p]);s.search=new URLSearchParams(o).toString();let D=e&&e.headers?e.headers:{};return i.headers={...l,...D,...t.headers},{url:s.pathname+s.search+s.hash,options:i}},apiSysDictDataDataListGet:async(a,t,r={})=>{if(a==null)throw new m("code","Required parameter code was null or undefined when calling apiSysDictDataDataListGet.");const s="/api/sysDictData/dataList",e=new URL(s,"https://example.com");let i;c&&(i=c.baseOptions);const l={method:"GET",...i,...r},h={},o={};a!==void 0&&(o.Code=a),t!==void 0&&(o.Status=t);const D=new URLSearchParams(e.search);for(const n in o)D.set(n,o[n]);for(const n in r.params)D.set(n,r.params[n]);e.search=new URLSearchParams(D).toString();let p=i&&i.headers?i.headers:{};return l.headers={...h,...p,...r.headers},{url:e.pathname+e.search+e.hash,options:l}},apiSysDictDataDeletePost:async(a,t={})=>{const r="/api/sysDictData/delete",s=new URL(r,"https://example.com");let e;c&&(e=c.baseOptions);const i={method:"POST",...e,...t},l={},h={};l["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const n in h)o.set(n,h[n]);for(const n in t.params)o.set(n,t.params[n]);s.search=new URLSearchParams(o).toString();let D=e&&e.headers?e.headers:{};i.headers={...l,...D,...t.headers};const p=typeof a!="string"||i.headers["Content-Type"]==="application/json";return i.data=p?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:i}},apiSysDictDataDetailGet:async(a,t,r={})=>{if(a==null)throw new m("id","Required parameter id was null or undefined when calling apiSysDictDataDetailGet.");const s="/api/sysDictData/detail",e=new URL(s,"https://example.com");let i;c&&(i=c.baseOptions);const l={method:"GET",...i,...r},h={},o={};t!==void 0&&(o.Status=t),a!==void 0&&(o.Id=a);const D=new URLSearchParams(e.search);for(const n in o)D.set(n,o[n]);for(const n in r.params)D.set(n,r.params[n]);e.search=new URLSearchParams(D).toString();let p=i&&i.headers?i.headers:{};return l.headers={...h,...p,...r.headers},{url:e.pathname+e.search+e.hash,options:l}},apiSysDictDataListGet:async(a,t={})=>{if(a==null)throw new m("dictTypeId","Required parameter dictTypeId was null or undefined when calling apiSysDictDataListGet.");const r="/api/sysDictData/list",s=new URL(r,"https://example.com");let e;c&&(e=c.baseOptions);const i={method:"GET",...e,...t},l={},h={};a!==void 0&&(h.DictTypeId=a);const o=new URLSearchParams(s.search);for(const p in h)o.set(p,h[p]);for(const p in t.params)o.set(p,t.params[p]);s.search=new URLSearchParams(o).toString();let D=e&&e.headers?e.headers:{};return i.headers={...l,...D,...t.headers},{url:s.pathname+s.search+s.hash,options:i}},apiSysDictDataPagePost:async(a,t={})=>{const r="/api/sysDictData/page",s=new URL(r,"https://example.com");let e;c&&(e=c.baseOptions);const i={method:"POST",...e,...t},l={},h={};l["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const n in h)o.set(n,h[n]);for(const n in t.params)o.set(n,t.params[n]);s.search=new URLSearchParams(o).toString();let D=e&&e.headers?e.headers:{};i.headers={...l,...D,...t.headers};const p=typeof a!="string"||i.headers["Content-Type"]==="application/json";return i.data=p?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:i}},apiSysDictDataSetStatusPost:async(a,t={})=>{const r="/api/sysDictData/setStatus",s=new URL(r,"https://example.com");let e;c&&(e=c.baseOptions);const i={method:"POST",...e,...t},l={},h={};l["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const n in h)o.set(n,h[n]);for(const n in t.params)o.set(n,t.params[n]);s.search=new URLSearchParams(o).toString();let D=e&&e.headers?e.headers:{};i.headers={...l,...D,...t.headers};const p=typeof a!="string"||i.headers["Content-Type"]==="application/json";return i.data=p?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:i}},apiSysDictDataUpdatePost:async(a,t={})=>{const r="/api/sysDictData/update",s=new URL(r,"https://example.com");let e;c&&(e=c.baseOptions);const i={method:"POST",...e,...t},l={},h={};l["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const n in h)o.set(n,h[n]);for(const n in t.params)o.set(n,t.params[n]);s.search=new URLSearchParams(o).toString();let D=e&&e.headers?e.headers:{};i.headers={...l,...D,...t.headers};const p=typeof a!="string"||i.headers["Content-Type"]==="application/json";return i.data=p?JSON.stringify(a!==void 0?a:{}):a||"",{url:s.pathname+s.search+s.hash,options:i}}}},S=function(c){return{async apiSysDictDataAddPost(a,t){const r=await u(c).apiSysDictDataAddPost(a,t);return(s=y,e=d)=>{const i={...r.options,url:e+r.url};return s.request(i)}},async apiSysDictDataDataListCodeGet(a,t){const r=await u(c).apiSysDictDataDataListCodeGet(a,t);return(s=y,e=d)=>{const i={...r.options,url:e+r.url};return s.request(i)}},async apiSysDictDataDataListGet(a,t,r){const s=await u(c).apiSysDictDataDataListGet(a,t,r);return(e=y,i=d)=>{const l={...s.options,url:i+s.url};return e.request(l)}},async apiSysDictDataDeletePost(a,t){const r=await u(c).apiSysDictDataDeletePost(a,t);return(s=y,e=d)=>{const i={...r.options,url:e+r.url};return s.request(i)}},async apiSysDictDataDetailGet(a,t,r){const s=await u(c).apiSysDictDataDetailGet(a,t,r);return(e=y,i=d)=>{const l={...s.options,url:i+s.url};return e.request(l)}},async apiSysDictDataListGet(a,t){const r=await u(c).apiSysDictDataListGet(a,t);return(s=y,e=d)=>{const i={...r.options,url:e+r.url};return s.request(i)}},async apiSysDictDataPagePost(a,t){const r=await u(c).apiSysDictDataPagePost(a,t);return(s=y,e=d)=>{const i={...r.options,url:e+r.url};return s.request(i)}},async apiSysDictDataSetStatusPost(a,t){const r=await u(c).apiSysDictDataSetStatusPost(a,t);return(s=y,e=d)=>{const i={...r.options,url:e+r.url};return s.request(i)}},async apiSysDictDataUpdatePost(a,t){const r=await u(c).apiSysDictDataUpdatePost(a,t);return(s=y,e=d)=>{const i={...r.options,url:e+r.url};return s.request(i)}}}};class V extends P{async apiSysDictDataAddPost(a,t){return S(this.configuration).apiSysDictDataAddPost(a,t).then(r=>r(this.axios,this.basePath))}async apiSysDictDataDataListCodeGet(a,t){return S(this.configuration).apiSysDictDataDataListCodeGet(a,t).then(r=>r(this.axios,this.basePath))}async apiSysDictDataDataListGet(a,t,r){return S(this.configuration).apiSysDictDataDataListGet(a,t,r).then(s=>s(this.axios,this.basePath))}async apiSysDictDataDeletePost(a,t){return S(this.configuration).apiSysDictDataDeletePost(a,t).then(r=>r(this.axios,this.basePath))}async apiSysDictDataDetailGet(a,t,r){return S(this.configuration).apiSysDictDataDetailGet(a,t,r).then(s=>s(this.axios,this.basePath))}async apiSysDictDataListGet(a,t){return S(this.configuration).apiSysDictDataListGet(a,t).then(r=>r(this.axios,this.basePath))}async apiSysDictDataPagePost(a,t){return S(this.configuration).apiSysDictDataPagePost(a,t).then(r=>r(this.axios,this.basePath))}async apiSysDictDataSetStatusPost(a,t){return S(this.configuration).apiSysDictDataSetStatusPost(a,t).then(r=>r(this.axios,this.basePath))}async apiSysDictDataUpdatePost(a,t){return S(this.configuration).apiSysDictDataUpdatePost(a,t).then(r=>r(this.axios,this.basePath))}}export{V as S};
