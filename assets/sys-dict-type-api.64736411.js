import{B as T,h as u,i as S,R as P}from"./index.122dcd40.js";const d=function(c){return{apiSysDictTypeAddPost:async(e,a={})=>{const r="/api/sysDictType/add",s=new URL(r,"https://example.com");let t;c&&(t=c.baseOptions);const n={method:"POST",...t,...a},p={},l={};p["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const i in l)o.set(i,l[i]);for(const i in a.params)o.set(i,a.params[i]);s.search=new URLSearchParams(o).toString();let h=t&&t.headers?t.headers:{};n.headers={...p,...h,...a.headers};const y=typeof e!="string"||n.headers["Content-Type"]==="application/json";return n.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDictTypeDataListGet:async(e,a={})=>{if(e==null)throw new P("code","Required parameter code was null or undefined when calling apiSysDictTypeDataListGet.");const r="/api/sysDictType/dataList",s=new URL(r,"https://example.com");let t;c&&(t=c.baseOptions);const n={method:"GET",...t,...a},p={},l={};e!==void 0&&(l.Code=e);const o=new URLSearchParams(s.search);for(const y in l)o.set(y,l[y]);for(const y in a.params)o.set(y,a.params[y]);s.search=new URLSearchParams(o).toString();let h=t&&t.headers?t.headers:{};return n.headers={...p,...h,...a.headers},{url:s.pathname+s.search+s.hash,options:n}},apiSysDictTypeDeletePost:async(e,a={})=>{const r="/api/sysDictType/delete",s=new URL(r,"https://example.com");let t;c&&(t=c.baseOptions);const n={method:"POST",...t,...a},p={},l={};p["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const i in l)o.set(i,l[i]);for(const i in a.params)o.set(i,a.params[i]);s.search=new URLSearchParams(o).toString();let h=t&&t.headers?t.headers:{};n.headers={...p,...h,...a.headers};const y=typeof e!="string"||n.headers["Content-Type"]==="application/json";return n.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDictTypeDetailGet:async(e,a,r={})=>{if(e==null)throw new P("id","Required parameter id was null or undefined when calling apiSysDictTypeDetailGet.");const s="/api/sysDictType/detail",t=new URL(s,"https://example.com");let n;c&&(n=c.baseOptions);const p={method:"GET",...n,...r},l={},o={};a!==void 0&&(o.Status=a),e!==void 0&&(o.Id=e);const h=new URLSearchParams(t.search);for(const i in o)h.set(i,o[i]);for(const i in r.params)h.set(i,r.params[i]);t.search=new URLSearchParams(h).toString();let y=n&&n.headers?n.headers:{};return p.headers={...l,...y,...r.headers},{url:t.pathname+t.search+t.hash,options:p}},apiSysDictTypeListGet:async(e={})=>{const a="/api/sysDictType/list",r=new URL(a,"https://example.com");let s;c&&(s=c.baseOptions);const t={method:"GET",...s,...e},n={},p={},l=new URLSearchParams(r.search);for(const h in p)l.set(h,p[h]);for(const h in e.params)l.set(h,e.params[h]);r.search=new URLSearchParams(l).toString();let o=s&&s.headers?s.headers:{};return t.headers={...n,...o,...e.headers},{url:r.pathname+r.search+r.hash,options:t}},apiSysDictTypePagePost:async(e,a={})=>{const r="/api/sysDictType/page",s=new URL(r,"https://example.com");let t;c&&(t=c.baseOptions);const n={method:"POST",...t,...a},p={},l={};p["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const i in l)o.set(i,l[i]);for(const i in a.params)o.set(i,a.params[i]);s.search=new URLSearchParams(o).toString();let h=t&&t.headers?t.headers:{};n.headers={...p,...h,...a.headers};const y=typeof e!="string"||n.headers["Content-Type"]==="application/json";return n.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDictTypeSetStatusPost:async(e,a={})=>{const r="/api/sysDictType/setStatus",s=new URL(r,"https://example.com");let t;c&&(t=c.baseOptions);const n={method:"POST",...t,...a},p={},l={};p["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const i in l)o.set(i,l[i]);for(const i in a.params)o.set(i,a.params[i]);s.search=new URLSearchParams(o).toString();let h=t&&t.headers?t.headers:{};n.headers={...p,...h,...a.headers};const y=typeof e!="string"||n.headers["Content-Type"]==="application/json";return n.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:s.pathname+s.search+s.hash,options:n}},apiSysDictTypeUpdatePost:async(e,a={})=>{const r="/api/sysDictType/update",s=new URL(r,"https://example.com");let t;c&&(t=c.baseOptions);const n={method:"POST",...t,...a},p={},l={};p["Content-Type"]="application/json-patch+json";const o=new URLSearchParams(s.search);for(const i in l)o.set(i,l[i]);for(const i in a.params)o.set(i,a.params[i]);s.search=new URLSearchParams(o).toString();let h=t&&t.headers?t.headers:{};n.headers={...p,...h,...a.headers};const y=typeof e!="string"||n.headers["Content-Type"]==="application/json";return n.data=y?JSON.stringify(e!==void 0?e:{}):e||"",{url:s.pathname+s.search+s.hash,options:n}}}},m=function(c){return{async apiSysDictTypeAddPost(e,a){const r=await d(c).apiSysDictTypeAddPost(e,a);return(s=u,t=S)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDictTypeDataListGet(e,a){const r=await d(c).apiSysDictTypeDataListGet(e,a);return(s=u,t=S)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDictTypeDeletePost(e,a){const r=await d(c).apiSysDictTypeDeletePost(e,a);return(s=u,t=S)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDictTypeDetailGet(e,a,r){const s=await d(c).apiSysDictTypeDetailGet(e,a,r);return(t=u,n=S)=>{const p={...s.options,url:n+s.url};return t.request(p)}},async apiSysDictTypeListGet(e){const a=await d(c).apiSysDictTypeListGet(e);return(r=u,s=S)=>{const t={...a.options,url:s+a.url};return r.request(t)}},async apiSysDictTypePagePost(e,a){const r=await d(c).apiSysDictTypePagePost(e,a);return(s=u,t=S)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDictTypeSetStatusPost(e,a){const r=await d(c).apiSysDictTypeSetStatusPost(e,a);return(s=u,t=S)=>{const n={...r.options,url:t+r.url};return s.request(n)}},async apiSysDictTypeUpdatePost(e,a){const r=await d(c).apiSysDictTypeUpdatePost(e,a);return(s=u,t=S)=>{const n={...r.options,url:t+r.url};return s.request(n)}}}};class O extends T{async apiSysDictTypeAddPost(e,a){return m(this.configuration).apiSysDictTypeAddPost(e,a).then(r=>r(this.axios,this.basePath))}async apiSysDictTypeDataListGet(e,a){return m(this.configuration).apiSysDictTypeDataListGet(e,a).then(r=>r(this.axios,this.basePath))}async apiSysDictTypeDeletePost(e,a){return m(this.configuration).apiSysDictTypeDeletePost(e,a).then(r=>r(this.axios,this.basePath))}async apiSysDictTypeDetailGet(e,a,r){return m(this.configuration).apiSysDictTypeDetailGet(e,a,r).then(s=>s(this.axios,this.basePath))}async apiSysDictTypeListGet(e){return m(this.configuration).apiSysDictTypeListGet(e).then(a=>a(this.axios,this.basePath))}async apiSysDictTypePagePost(e,a){return m(this.configuration).apiSysDictTypePagePost(e,a).then(r=>r(this.axios,this.basePath))}async apiSysDictTypeSetStatusPost(e,a){return m(this.configuration).apiSysDictTypeSetStatusPost(e,a).then(r=>r(this.axios,this.basePath))}async apiSysDictTypeUpdatePost(e,a){return m(this.configuration).apiSysDictTypeUpdatePost(e,a).then(r=>r(this.axios,this.basePath))}}export{O as S};
